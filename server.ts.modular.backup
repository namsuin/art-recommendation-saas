#!/usr/bin/env bun
/**
 * Art Recommendation SaaS - Modular Server Architecture
 * Simplified server with modular route structure
 */

// Initialize logging first
import { serverLogger } from "./shared/logger";

serverLogger.info("üé® Starting Art Recommendation SaaS Server...");

// Environment validation
import { printEnvironmentStatus, validateEnvironment } from "./backend/utils/env-validator";

printEnvironmentStatus();
const envValidation = validateEnvironment();

if (!envValidation.isValid) {
  serverLogger.error('Critical environment configuration errors! Please check your .env file and fix the errors above.');
  process.exit(1);
}

// Modular route system
import { MainRouter } from "./backend/routes/router";
import { mockArtistApplications } from "./backend/services/mock-artist-applications";
import { mockDB } from "./backend/services/mock-database";
import { supabase } from "./backend/services/supabase";
import { performanceMonitor } from "./backend/services/performance-monitor";

// Initialize main router
const mainRouter = new MainRouter();

const server = Bun.serve({
  port: parseInt(process.env.PORT || '3000'),
  hostname: "0.0.0.0",
  
  // Handle server startup errors
  error(error) {
    serverLogger.error("Server error:", error);
    return new Response("Internal Server Error", { status: 500 });
  },
  
  async fetch(req) {
    // Start performance tracking
    const endTracking = performanceMonitor.trackRequest(req);
    
    // CORS headers
    const corsHeaders = {
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
      "Access-Control-Allow-Headers": "Content-Type, Authorization",
    };
    
    // Handle CORS preflight
    if (req.method === "OPTIONS") {
      endTracking();
      return new Response(null, { headers: corsHeaders });
    }
    
    // Request logging for development
    if (process.env.NODE_ENV === 'development') {
      const url = new URL(req.url);
      serverLogger.info(`${req.method} ${url.pathname}`);
    }
    
    try {
      // Use modular router system
      const response = await mainRouter.handleRequest(req, corsHeaders);
      endTracking();
      return response;
    } catch (error) {
      endTracking();
      serverLogger.error('Request handling error:', error);
      
      // Report error to performance monitor
      performanceMonitor.reportError({
        id: `server_error_${Date.now()}`,
        message: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
        context: {
          url: req.url,
          method: req.method,
        },
        timestamp: new Date().toISOString(),
        severity: 'high',
      });
      
      return new Response(JSON.stringify({
        error: "Internal server error",
        message: error instanceof Error ? error.message : String(error)
      }), {
        status: 500,
        headers: { "Content-Type": "application/json", ...corsHeaders }
      });
    }
  }
});

// Helper functions exported for the modular router system
export async function checkAdminAuth(req: Request): Promise<{ isAdmin: boolean; response?: Response }> {
  if (process.env.NODE_ENV === "development") serverLogger.info('üîç Admin auth check');
  
  // Authorization header Ï≤¥ÌÅ¨
  const authHeader = req.headers.get('Authorization');
  if (authHeader && authHeader.startsWith('Bearer ')) {
    const token = authHeader.replace('Bearer ', '');
    
    // ÌôòÍ≤ΩÎ≥ÄÏàòÏóêÏÑú Í¥ÄÎ¶¨Ïûê ÌÜ†ÌÅ∞ ÌôïÏù∏
    const adminAuthCode = process.env.ADMIN_AUTH_CODE;
    if (token && token === adminAuthCode) {
      if (process.env.NODE_ENV === "development") serverLogger.info('‚úÖ Admin access granted via token');
      return { isAdmin: true };
    }
  }

  // Cookie-based admin authentication fallback
  const cookieHeader = req.headers.get('Cookie');
  if (cookieHeader) {
    const cookies = cookieHeader;
    const adminToken = cookies.split(';').find(c => c.trim().startsWith('admin-token='));
    if (adminToken) {
      const token = adminToken.split('=')[1];
      const adminAuthCode = process.env.ADMIN_AUTH_CODE;
      if (token && token === adminAuthCode) {
        if (process.env.NODE_ENV === "development") serverLogger.info('‚úÖ Admin access granted via cookie');
        return { isAdmin: true };
      }
    }
  }

  if (process.env.NODE_ENV === "development") serverLogger.info('‚ùå Admin access denied');
  
  return {
    isAdmin: false,
    response: new Response(JSON.stringify({
      error: "Admin access required"
    }), {
      status: 403,
      headers: { "Content-Type": "application/json" }
    })
  };
}

// Token validation helper
export async function validateAuthToken(token: string): Promise<string | null> {
  if (!token) return null;

  try {
    // Mock token validation - always returns user role for valid tokens
    if (token.length > 10) {
      return 'user';
    }

    const { data: user, error } = await supabase.auth.getUser(token);
    
    if (error || !user) {
      return null;
    }

    // ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑÏóêÏÑú Ïó≠Ìï† Ï°∞Ìöå
    const { data: profile, error: profileError } = await supabase
      .from('users')
      .select('role')
      .eq('id', user.user.id)
      .single();

    if (profileError) {
      serverLogger.warn('Failed to get user profile:', profileError.message);
      return 'user'; // Í∏∞Î≥∏Í∞í
    }

    return profile?.role || 'user';
  } catch (error) {
    serverLogger.error('Token validation error:', error);
    return null;
  }
}

// Enhanced startup logging
if (process.env.NODE_ENV === "development") serverLogger.info(`
üéâ Art Recommendation SaaS Server Started!
üåê Local URL: http://localhost:${server.port}
üåç Production URL: https://art-recommendation-saas.onrender.com
‚ù§Ô∏è  Health Check: ${process.env.NODE_ENV === 'production' ? 'https://art-recommendation-saas.onrender.com' : 'http://localhost:' + server.port}/api/health
üîß Environment: ${process.env.NODE_ENV || 'development'}
üöÄ Runtime: Bun ${Bun.version}
üìã Features: AI Analysis, Authentication, Static Serving
‚ö° Performance: Modular architecture with separated route handlers
üè† Hostname: ${server.hostname}
üîå Port: ${server.port}
`);

// Startup health check
setTimeout(async () => {
  try {
    const healthUrl = `http://localhost:${server.port}/api/health`;
    const response = await fetch(healthUrl);
    if (response.ok) {
      if (process.env.NODE_ENV === "development") serverLogger.info('‚úÖ Server health check passed');
    } else {
      serverLogger.error('‚ùå Server health check failed:', response.status);
    }
  } catch (error) {
    serverLogger.error('‚ùå Server health check error:', error);
  }
}, 2000);
